// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TEAM_ROLE_ENUM {
  OWNER
  MEMBER
}

enum SYSTEM_MESSAGE_EVENT_TYPE_ENUM {
  CLOSED_TICKET
  REOPENED_TICKET
  SNOOZED_TICKET
}

model User {
  id                    String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at            DateTime             @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?            @db.Timestamptz(6)
  email                 String               @unique @db.VarChar
  full_name             String
  image_url             String?
  current_team_id       String               @db.Uuid
  current_team          Team                 @relation(fields: [current_team_id], references: [id])
  teams                 UserOnTeam[]
  messages              Message[]
  system_message_events SystemMessageEvent[]

  @@map("users")
}

model Team {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime     @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?    @db.Timestamptz(6)
  name          String
  image_url     String?
  members       UserOnTeam[]
  current_users User[]
  tickets       Ticket[]
  is_personal   Boolean      @default(false)
  auth_token    String?

  @@map("teams")
}

model UserOnTeam {
  user_id String         @db.Uuid
  team_id String         @db.Uuid
  role    TEAM_ROLE_ENUM
  team    Team           @relation(fields: [team_id], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, team_id])
  @@unique([user_id, team_id])
  @@map("users_on_teams")
}

model Ticket {
  id                    String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  short_id              String               @unique
  created_at            DateTime             @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?            @db.Timestamptz(6)
  team_id               String               @db.Uuid
  team                  Team                 @relation(fields: [team_id], references: [id])
  subject               String
  meta                  Json?
  messages              Message[]
  snoozed_until         DateTime?
  closed_at             DateTime?
  event_id              String?
  starred_at            DateTime?
  system_message_events SystemMessageEvent[]

  @@map("tickets")
}

model Message {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at           DateTime  @default(now()) @db.Timestamptz(6)
  updated_at           DateTime? @db.Timestamptz(6)
  ticket_id            String    @db.Uuid
  ticket               Ticket    @relation(fields: [ticket_id], references: [id])
  handler_id           String?   @db.Uuid
  handler              User?     @relation(fields: [handler_id], references: [id])
  sent_from_full_name  String?
  sent_from_email      String?
  sent_from_avatar_url String?
  body                 String
  email_id             String?

  @@map("messages")
}

model SystemMessageEvent {
  id                 String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at         DateTime                       @default(now()) @db.Timestamptz(6)
  created_by_user_id String?                        @db.Uuid
  created_by_user    User?                          @relation(fields: [created_by_user_id], references: [id])
  event_type         SYSTEM_MESSAGE_EVENT_TYPE_ENUM
  ticket_id          String                         @db.Uuid
  ticket             Ticket                         @relation(fields: [ticket_id], references: [id])

  @@map("system_message_events")
}

model Waitlist {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  email      String   @unique
  email_id   String?

  @@map("waitlist")
}
